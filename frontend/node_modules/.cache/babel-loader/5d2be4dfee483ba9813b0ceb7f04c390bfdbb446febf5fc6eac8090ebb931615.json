{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2025\\\\ShopBest\\\\frontend\\\\src\\\\components\\\\features\\\\AutoComplete.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { AutoComplete } from 'antd';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AutoCompletion() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    const controller = new AbortController();\n    async function fetchData() {\n      if (!query) {\n        return;\n      }\n      try {\n        const res = await fetch(`http://localhost:8000/api/suggestion?q=${encodeURIComponent(query)}`, {\n          signal: controller.signal\n        });\n        const data = await res.json();\n        const sliceData = data.slice(0, 8);\n        setOptions(sliceData);\n      } catch (err) {\n        if (err.name !== \"AbortError\") {\n          console.error(err);\n        }\n      }\n    }\n    fetchData();\n    return () => controller.abort();\n  }, [query]);\n  const onChange = value => {\n    setQuery(value);\n  };\n  const onSelect = (_value, option) => {\n    setQuery(option.label); // show label in the input\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: options,\n      style: {\n        width: 200\n      },\n      onChange: onChange,\n      onSelect: onSelect,\n      value: query,\n      placeholder: \"Search proucts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(AutoCompletion, \"RE8qI1T8b2NN0VuDp7bJTldskFw=\");\n_c = AutoCompletion;\n;\nvar _c;\n$RefreshReg$(_c, \"AutoCompletion\");","map":{"version":3,"names":["useState","useEffect","AutoComplete","jsxDEV","_jsxDEV","Fragment","_Fragment","AutoCompletion","_s","query","setQuery","options","setOptions","controller","AbortController","fetchData","res","fetch","encodeURIComponent","signal","data","json","sliceData","slice","err","name","console","error","abort","onChange","value","onSelect","_value","option","label","children","style","width","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project2025/ShopBest/frontend/src/components/features/AutoComplete.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { AutoComplete } from 'antd';\r\nimport type { AutoCompleteProps } from 'antd';\r\n\r\nexport function AutoCompletion() {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [options, setOptions] = useState<AutoCompleteProps['options']>([]);\r\n    useEffect(() => {\r\n        const controller = new AbortController();\r\n        async function fetchData() {\r\n            if(!query){\r\n                return;\r\n            }\r\n            try {\r\n                const res = await fetch(`http://localhost:8000/api/suggestion?q=${encodeURIComponent(query)}`, {\r\n                    signal: controller.signal,\r\n                });\r\n                const data = await res.json();\r\n                const sliceData = data.slice(0, 8);\r\n                setOptions(sliceData);\r\n            } catch (err: any) {\r\n                if (err.name !== \"AbortError\") {\r\n                    console.error(err);\r\n                }\r\n            } \r\n        }\r\n\r\n        fetchData();\r\n        return () => controller.abort();\r\n    }, [query]);\r\n\r\n    const onChange = (value: any) => {\r\n        setQuery(value);\r\n    };\r\n    const onSelect = (_value: string, option: any) => {\r\n        setQuery(option.label); // show label in the input\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AutoComplete\r\n                options={options}\r\n                style={{ width: 200 }}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n                value={query}\r\n                placeholder=\"Search proucts\"\r\n            />\r\n        </>\r\n    );\r\n};"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGpC,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAA+B,EAAE,CAAC;EACxEC,SAAS,CAAC,MAAM;IACZ,MAAMY,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,eAAeC,SAASA,CAAA,EAAG;MACvB,IAAG,CAACN,KAAK,EAAC;QACN;MACJ;MACA,IAAI;QACA,MAAMO,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0CC,kBAAkB,CAACT,KAAK,CAAC,EAAE,EAAE;UAC3FU,MAAM,EAAEN,UAAU,CAACM;QACvB,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;QAC7B,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAClCX,UAAU,CAACU,SAAS,CAAC;MACzB,CAAC,CAAC,OAAOE,GAAQ,EAAE;QACf,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC3BC,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;QACtB;MACJ;IACJ;IAEAT,SAAS,CAAC,CAAC;IACX,OAAO,MAAMF,UAAU,CAACe,KAAK,CAAC,CAAC;EACnC,CAAC,EAAE,CAACnB,KAAK,CAAC,CAAC;EAEX,MAAMoB,QAAQ,GAAIC,KAAU,IAAK;IAC7BpB,QAAQ,CAACoB,KAAK,CAAC;EACnB,CAAC;EACD,MAAMC,QAAQ,GAAGA,CAACC,MAAc,EAAEC,MAAW,KAAK;IAC9CvB,QAAQ,CAACuB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,oBACI9B,OAAA,CAAAE,SAAA;IAAA6B,QAAA,eACI/B,OAAA,CAACF,YAAY;MACTS,OAAO,EAAEA,OAAQ;MACjByB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MACtBR,QAAQ,EAAEA,QAAS;MACnBE,QAAQ,EAAEA,QAAS;MACnBD,KAAK,EAAErB,KAAM;MACb6B,WAAW,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC,gBACJ,CAAC;AAEX;AAAClC,EAAA,CA9CeD,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AA8C7B;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}